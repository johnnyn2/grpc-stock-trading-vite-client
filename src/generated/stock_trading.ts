// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "stock_trading.proto" (package "stocktrading", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message stocktrading.StockRequest
 */
export interface StockRequest {
    /**
     * @generated from protobuf field: string stock_symbol = 1
     */
    stockSymbol: string;
}
/**
 * @generated from protobuf message stocktrading.StockResponse
 */
export interface StockResponse {
    /**
     * @generated from protobuf field: string stock_symbol = 1
     */
    stockSymbol: string;
    /**
     * @generated from protobuf field: double price = 2
     */
    price: number;
    /**
     * @generated from protobuf field: string timestamp = 3
     */
    timestamp: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class StockRequest$Type extends MessageType<StockRequest> {
    constructor() {
        super("stocktrading.StockRequest", [
            { no: 1, name: "stock_symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StockRequest>): StockRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stockSymbol = "";
        if (value !== undefined)
            reflectionMergePartial<StockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StockRequest): StockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stock_symbol */ 1:
                    message.stockSymbol = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stock_symbol = 1; */
        if (message.stockSymbol !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stockSymbol);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stocktrading.StockRequest
 */
export const StockRequest = new StockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StockResponse$Type extends MessageType<StockResponse> {
    constructor() {
        super("stocktrading.StockResponse", [
            { no: 1, name: "stock_symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StockResponse>): StockResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stockSymbol = "";
        message.price = 0;
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<StockResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StockResponse): StockResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stock_symbol */ 1:
                    message.stockSymbol = reader.string();
                    break;
                case /* double price */ 2:
                    message.price = reader.double();
                    break;
                case /* string timestamp */ 3:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StockResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stock_symbol = 1; */
        if (message.stockSymbol !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stockSymbol);
        /* double price = 2; */
        if (message.price !== 0)
            writer.tag(2, WireType.Bit64).double(message.price);
        /* string timestamp = 3; */
        if (message.timestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stocktrading.StockResponse
 */
export const StockResponse = new StockResponse$Type();
/**
 * @generated ServiceType for protobuf service stocktrading.StockTradingService
 */
export const StockTradingService = new ServiceType("stocktrading.StockTradingService", [
    { name: "GetStockPrice", options: {}, I: StockRequest, O: StockResponse },
    { name: "subscribeStockPrice", serverStreaming: true, options: {}, I: StockRequest, O: StockResponse }
]);
