// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "stock_trading.proto" (package "stocktrading", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StockTradingService } from "./stock_trading";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StockResponse } from "./stock_trading";
import type { StockRequest } from "./stock_trading";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service stocktrading.StockTradingService
 */
export interface IStockTradingServiceClient {
    /**
     * Uniary RPC
     *
     * @generated from protobuf rpc: GetStockPrice
     */
    getStockPrice(input: StockRequest, options?: RpcOptions): UnaryCall<StockRequest, StockResponse>;
    /**
     * server streaming
     *
     * @generated from protobuf rpc: subscribeStockPrice
     */
    subscribeStockPrice(input: StockRequest, options?: RpcOptions): ServerStreamingCall<StockRequest, StockResponse>;
}
/**
 * @generated from protobuf service stocktrading.StockTradingService
 */
export class StockTradingServiceClient implements IStockTradingServiceClient, ServiceInfo {
    typeName = StockTradingService.typeName;
    methods = StockTradingService.methods;
    options = StockTradingService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Uniary RPC
     *
     * @generated from protobuf rpc: GetStockPrice
     */
    getStockPrice(input: StockRequest, options?: RpcOptions): UnaryCall<StockRequest, StockResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StockRequest, StockResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * server streaming
     *
     * @generated from protobuf rpc: subscribeStockPrice
     */
    subscribeStockPrice(input: StockRequest, options?: RpcOptions): ServerStreamingCall<StockRequest, StockResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StockRequest, StockResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
